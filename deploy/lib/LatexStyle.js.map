{"version":3,"sources":["../../sources/lib/LatexStyle.js"],"names":["testProperties","require","Latex","module","exports","Object","defineProperty","value","packageName","stylePackage","symbols","undefined","Array","TypeError","iSymbol","length","symbol","Symbol","pattern","symbolPatternFirstChar","symbols_","push","commands","iCommand","command","Command","name","commands_","environments","iEnvironment","environment","Environment","environments_","hasOwnProperty","filteredSymbols","filter","styleItem","commandName","filteredCommands","environmentName","filteredEnvironments","state","patternFirstChar","State","SyntaxError","test","modes","Item","opt_initialProperties","lexeme","Lexeme","modeKey","mode","Mode","enumerable","other","defineProperties","prototype","Parameter","operations","map","Operation","operation","operations_","every","iOperation","equals","slice","parameters","parameter","patternComponents","match","patternPart","parameterIndex","Number","substring","parameters_","html","iParameter","patternComponents_","patternComponent","join"],"mappings":"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","file":"LatexStyle.js","sourcesContent":["/**\n * @fileoverview LaTeX style structures\n * This file is a part of TeXnous project.\n *\n * @copyright TeXnous project team (http://texnous.com) 2016\n * @license LGPL-3.0\n *\n * This library is free software; you can redistribute it and/or modify it under the terms of the\n * GNU Lesser General Public License as published by the Free Software Foundation; either version 3\n * of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without\n * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License along with this library;\n * if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA\n * 02111-1307, USA.\n */\n\n'use strict';\n\n/**@module */\n\n\nconst testProperties = require('./Utils').testProperties; // object property testing function\n/**\n * General LaTeX definitions\n * @property Lexeme\n * @property Mode\n * @property OperationProperties\n */\nconst Latex = require('./Latex');\n\n\n/**\n * LaTeX style collection\n * @class\n * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n */\nmodule.exports = class {\n  /**\n   * LaTeX style package properties\n   * @interface PackageProperties\n   * @property {(!Array.<!SymbolProperties>|undefined)} symbols -\n   *           The symbols of the package in the priority descending order\n   * @property {(!Array.<!CommandProperties>|undefined)} commands -\n   *           The commands of the package in the priority descending order\n   * @property {(!Array.<!EnvironmentProperties>|undefined)} environments -\n   *           The environments of the package\n   * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n   */\n\n  //noinspection JSUnusedGlobalSymbols\n  /**\n   * Constructor\n   * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n   */\n  constructor() {\n    /**\n     * The symbols by the first symbol of the pattern in the priority increasing order\n     * @private {!Object.<string,!Array.<!Symbol>>}\n     * @name symbols_\n     */\n    Object.defineProperty(this, 'symbols_', { value: {} });\n    /**\n     * The commands by the name in the priority increasing order\n     * @private {!Object.<string,!Array.<!Command>>}\n     * @name commands_\n     */\n    Object.defineProperty(this, 'commands_', { value: {} });\n    /**\n     * The environments by the name in the priority increasing order\n     * @private {!Object.<string,!Array.<!Environment>>}\n     * @name environments_\n     */\n    Object.defineProperty(this, 'environments_', { value: {} });\n  };\n\n\n  //noinspection JSUnusedGlobalSymbols\n  /**\n   * Load a package with style definitions\n   * @param {string} packageName the name of the style package\n   * @param {PackageProperties} stylePackage the style package\n   * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n   */\n  loadPackage(packageName, stylePackage) {\n    if (stylePackage.symbols !== undefined) { // if the symbol descriptions are defined\n      if (!(stylePackage.symbols instanceof Array))\n        throw new TypeError('\"stylePackage.symbols\" isn\\'t an Array');\n      // for all the symbol descriptions\n      for (let iSymbol = stylePackage.symbols.length - 1; iSymbol >= 0; --iSymbol) {\n        let symbol = new Symbol(stylePackage.symbols[iSymbol]); // the symbol description\n        if (symbol.pattern) { // if the symbol has a pattern\n          let symbolPatternFirstChar = symbol.pattern[0]; // the first char of the pattern\n          // the symbols with the same pattern first char\n          (this.symbols_[symbolPatternFirstChar] || (this.symbols_[symbolPatternFirstChar] = []))\n            .push({ symbol, packageName }); // store the symbol and the package name\n        }\n      }\n    }\n    if (stylePackage.commands !== undefined) { // if the command descriptions are defined\n      if (!(stylePackage.commands instanceof Array))\n        throw new TypeError('\"stylePackage.commands\" isn\\'t an Array');\n      // for all the command descriptions\n      for (let iCommand = stylePackage.commands.length - 1; iCommand >= 0; --iCommand) {\n        let command = new Command(stylePackage.commands[iCommand]); // the command description\n        if (command.name) { // if the command has a name\n          // the commands with the same name\n          (this.commands_[command.name] || (this.commands_[command.name] = []))\n            .push({ command, packageName }); // store the command and the package name\n        }\n      }\n    }\n    if (stylePackage.environments !== undefined) { // if the environment descriptions are defined\n      if (!(stylePackage.environments instanceof Array))\n        throw new TypeError('\"stylePackage.environments\" isn\\'t an Array');\n      // for all the environment descriptions\n      for (let iEnvironment = stylePackage.environments.length - 1; iEnvironment >= 0;\n           --iEnvironment) {\n        // the environment description\n        let environment = new Environment(stylePackage.environments[iEnvironment]);\n        if (environment.name) { // if the environment has a name\n          // the environments with the same name\n          (this.environments_[environment.name] || (this.environments_[environment.name] = []))\n            .push({ environment, packageName }); // store the environment and the package name\n        }\n      }\n    }\n  };\n\n\n  //noinspection JSUnusedGlobalSymbols\n  /**\n   * Unload a package with style definitions\n   * @param {string} packageName the name of the style package\n   * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n   */\n  unloadPackage(packageName) {\n    // for all the symbol pattern first chars\n    for (let symbolPatternFirstChar in this.symbols_)\n      if (this.symbols_.hasOwnProperty(symbolPatternFirstChar)) {\n        // the filtered symbols with the same pattern first char\n        let filteredSymbols = this.symbols_[symbolPatternFirstChar].filter(styleItem => {\n          return styleItem.packageName !== packageName;\n        });\n        // if there are still some symbols with the same pattern first char\n        if (filteredSymbols.length) {\n          // store the filtered symbol descriptions\n          this.symbols_[symbolPatternFirstChar] = filteredSymbols;\n        } else { // if there are no the symbols with the same pattern first char\n          delete this.symbols_[symbolPatternFirstChar]; // delete the key-value pair\n        }\n      }\n    // for all the command names\n    for (let commandName in this.commands_) if (this.commands_.hasOwnProperty(commandName)) {\n      // the filtered commands with the same name\n      let filteredCommands = this.commands_[commandName].filter(styleItem => {\n        return styleItem.packageName !== packageName;\n      });\n      if (filteredCommands.length) { // if there are still some commands with the same name\n        this.commands_[commandName] = filteredCommands; // store the filtered command descriptions\n      } else { // if there are no the commands with the same name\n        delete this.commands_[commandName]; // delete the key-value pair\n      }\n    }\n    // for all the environment names\n    for (let environmentName in this.environments_)\n      if (this.environments_.hasOwnProperty(environmentName)) {\n        // the filtered environments with the same name\n        let filteredEnvironments = this.environments_[environmentName].filter(styleItem => {\n          return styleItem.packageName !== packageName;\n        });\n        // if there are still some environments with the same name\n        if (filteredEnvironments.length) {\n          // store the filtered environment descriptions\n          this.environments_[environmentName] = filteredEnvironments;\n        } else { // if there are no the environments with the same name\n          delete this.environments_[environmentName]; // delete the key-value pair\n        }\n      }\n  };\n\n\n  //noinspection JSUnusedGlobalSymbols\n  /**\n   * Get symbols\n   * @param {!Latex.State} state the state that the symbols must match to\n   * @param {string} patternFirstChar the first char of the symbol parameter pattern\n   * @return {!Array.<!Symbol>} the list of symbols in the priority descending order\n   * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n   */\n  symbols(state, patternFirstChar) {\n    if (!(state instanceof Latex.State))\n      throw new SyntaxError('\"state\" isn\\'t a Latex.State instance');\n    // all the symbols with the defined first pattern char\n    let symbols = this.symbols_[patternFirstChar];\n    if (symbols === undefined) return []; // return empty list if there are no such symbols\n    let filteredSymbols = []; // the list of the symbols matching to the state\n    for (let iSymbol = symbols.length - 1; iSymbol >= 0; --iSymbol) { // for all the symbols\n      let symbol = symbols[iSymbol].symbol; // the symbol\n      // store the symbol if it matches to the state\n      //noinspection JSUnresolvedFunction\n      if (state.test(symbol.modes)) filteredSymbols.push(symbol);\n    }\n    return filteredSymbols;\n  };\n  \n  \n  //noinspection JSUnusedGlobalSymbols\n  /**\n   * Get commands\n   * @param {!Latex.State} state the state that the commands must match to\n   * @param {!string} name the name of the command\n   * @return {Array.<Command>} the list of commands in the priority descending order\n   * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n   */\n  commands(state, name) {\n    if (!(state instanceof Latex.State))\n      throw new SyntaxError('\"state\" isn\\'t a Latex.State instance');\n    let commands = this.commands_[name]; // all the commands with the defined name\n    if (!commands) return []; // return empty list if there are no such commands\n    let filteredCommands = []; // the list of the commands matching to the state\n    for (let iCommand = commands.length - 1; iCommand >= 0; --iCommand) { // for all the commands\n      let command = commands[iCommand].command; // the command\n      // store the command if it matches to the state\n      //noinspection JSUnresolvedFunction\n      if (state.test(command.modes)) filteredCommands.push(command);\n    }\n    return filteredCommands;\n  };\n\n\n  //noinspection JSUnusedGlobalSymbols\n  /**\n   * Get environments\n   * @param {!Latex.State} state the state that the environments must match to\n   * @param {!string} name the name of the environment\n   * @return {Array.<Environment>} the list of environments in the priority descending order\n   * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n   */\n  environments(state, name) {\n    if (!(state instanceof Latex.State)) throw new SyntaxError('state isn\\'t Latex.State instance');\n    let environments = this.environments_[name]; // all the environments with the defined name\n    if (!environments) return []; // return empty list if there are no such environments\n    let filteredEnvironments = []; // the list of the environments matching to the state\n    // for all the environments\n    for (let iEnvironment = environments.length - 1; iEnvironment >= 0; --iEnvironment) {\n      let environment = environments[iEnvironment].environment; // the environment\n      // store the environment if it matches to the state\n      //noinspection JSUnresolvedFunction\n      if (state.test(environment.modes)) filteredEnvironments.push(environment);\n    }\n    return filteredEnvironments;\n  };\n};\n\n\n\n/**\n * LaTeX style item properties\n * @interface ItemProperties\n * @property {(Latex.Lexeme|null|undefined)} lexeme - The logical lexeme\n * @property {(!Object.<Latex.Mode, boolean>|undefined)} modes -\n *           The modes where the item is defined or not\n * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n */\n\n\n\n/**\n * LaTeX style item encapsulation\n * @class\n * @property {(Latex.Lexeme|null)} lexeme - The logical lexeme\n * @property {!Object.<Latex.Mode, boolean>} modes - The modes where the item is defined or not\n * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n */\nconst Item = class {\n  //noinspection JSUnusedGlobalSymbols\n  /**\n   * Constructor.\n   * @param {!ItemProperties=} opt_initialProperties the initial property values\n   */\n  constructor (opt_initialProperties) {\n    // do nothing if there are no initial properties\n    if (opt_initialProperties === undefined) return;\n    if (!(opt_initialProperties instanceof Object))\n      throw new TypeError('\"initialProperties\" isn\\'t an Object instance');\n    switch (opt_initialProperties.lexeme) {\n    case undefined: break; // do nothing if no lexeme defined\n    case null: break; // do nothing if the default lexeme defined\n    default:\n      let lexeme = Latex.Lexeme[opt_initialProperties.lexeme]; // verify the lexeme\n      if (lexeme === undefined)\n        throw new TypeError('\"initialProperties.lexeme\" isn\\'t a Latex.Lexeme option');\n      Object.defineProperty(this, 'lexeme', { value: lexeme });\n    }\n    if (opt_initialProperties.modes !== undefined) {// if the mode states are set\n      if (!(opt_initialProperties.modes instanceof Object))\n        throw new TypeError('\"initialProperties.modes\" isn\\'t an Object instance');\n      Object.defineProperty(this, 'modes', { value: { } }); // create the mode state storage\n      for (let modeKey in opt_initialProperties.modes) { // for all the given modes\n        //noinspection JSUnfilteredForInLoop\n        let mode = Latex.Mode[modeKey]; // verify the mode key\n        if (mode === undefined) // if the mode is unknown\n          throw new TypeError('\"initialProperties.modes[' + modeKey +\n            ']\" isn\\'t a Latex.Mode option');\n        // store the mode state\n        //noinspection JSUnfilteredForInLoop\n        Object.defineProperty(this.modes, mode, {\n          value: opt_initialProperties.modes[modeKey],\n          enumerable: true\n        });\n      }\n    }\n  }\n\n\n  /**\n   * Compare this item with the other one\n   * @param {?Item} other the item to compare with\n   * @return {boolean} true if the items are equal, false otherwise\n   * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n   */\n  equals(other) {\n    if (!(other instanceof Item)) return false;\n    return this.lexeme === other.lexeme &&\n      testProperties(this.modes, other.modes, Latex.Mode, false);\n  }\n};\nObject.defineProperties(Item.prototype, { // default property values\n  lexeme: { value: null, enumerable: true }, // no lexeme by default\n  modes: { value: {}, enumerable: true } // no mode mask by default\n});\n\n\n\n/**\n * LaTeX symbol or command parameter properties\n * @interface ParameterProperties\n * @extends ItemProperties\n * @property {(!Array.<!Latex.Operation|!Latex.OperationProperties>|undefined)} operations -\n *           The LaTeX operations that are performed before the parameter\n * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n */\n\n\n\n/**\n * LaTeX symbol or command parameter encapsulation\n * @class\n * @extends Item\n * @property {!Array.<!Latex.Operation>} operations -\n *           The LaTeX operations that are performed before this parameter\n * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n */\nconst Parameter = module.exports['Parameter'] = class extends Item {\n  //noinspection JSUnusedGlobalSymbols\n  /**\n   * Constructor\n   * @param {!ParameterProperties=} opt_initialProperties the initial property values\n   */\n  constructor(opt_initialProperties) {\n    super(opt_initialProperties); // the superclass constructor\n    // do nothing if there are no initial properties\n    if (opt_initialProperties === undefined) return;\n    if (opt_initialProperties.operations !== undefined) { // if the operation list is set\n      if (!(opt_initialProperties.operations instanceof Array))\n        throw new TypeError('\"initialProperties.operations\" isn\\'t an Array instance');\n      Object.defineProperty(this, 'operations_', { // generate and store the operations list\n        value: opt_initialProperties.operations.map(operation => new Latex.Operation(operation))\n      });\n    }\n  }\n\n\n  //noinspection JSUnusedGlobalSymbols\n  /**\n   * Get the LaTeX operations that are performed before this parameter\n   * @return {!Array.<!Latex.Operation>} the operation list\n   * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n   */\n  get operations() { return this.operations_.slice() }\n\n\n  //noinspection JSUnusedGlobalSymbols\n  /**\n   * Compare this parameter with the other one\n   * @param {?Parameter} other the parameter to compare with\n   * @return {boolean} true if the parameters are equal, false otherwise\n   * @override\n   * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n   */\n  equals(other) {\n    if (!(other instanceof Parameter)) return false; // type test\n    if (!super.equals(other)) return false; // superclass test\n    //noinspection JSUnresolvedVariable\n    if (this.operations_.length !== other.operations_.length) return false;\n    // test all the operations\n    //noinspection JSUnresolvedVariable,JSUnresolvedFunction\n    return this.operations_.every((operation, iOperation) =>\n      operation.equals(other.operations_[iOperation]));\n  }\n};\nObject.defineProperties(Parameter.prototype, { // make getters and setters enumerable\n  operations: { enumerable: true }\n});\nObject.defineProperties(Parameter.prototype, { // default property values\n  operations_: { value: [], enumerable: false } // empty operation list by default\n});\n\n\n\n/**\n * LaTeX symbol properties\n * @interface SymbolProperties\n * @extends ItemProperties\n * @property {(!Array.<!Latex.Operation|!Latex.OperationProperties>|undefined)} operations -\n *           The LaTeX operations that\n * @property {(!Array.<!Parameter|!ParameterProperties>|undefined)} parameters -\n *           The parameters description list\n * @property {(string|undefined)} pattern - The LaTeX input pattern\n * @property {(string|undefined)} html - The HTML output pattern\n * are performed after the symbol\n * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n */\n\n\n\n/**\n * LaTeX symbol encapsulation\n * @class\n * @extends Item\n * @property {!Array.<!Latex.Operation>} operations -\n *           The LaTeX operations that are performed after this symbol\n * @property {!Array.<!Parameter>} parameters - The parameters description list\n * @property {!Array.<null|string|number>} patternComponents - The LaTeX input pattern components\n * @property {string} pattern - The LaTeX input pattern\n * @property {string} html - The HTML output pattern\n * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n */\nconst Symbol = module.exports['Symbol'] = class extends Item {\n  //noinspection JSUnusedGlobalSymbols\n  /**\n   * Constructor\n   * @param {!SymbolProperties=} opt_initialProperties the initial property values\n   */\n  constructor(opt_initialProperties) {\n    super(opt_initialProperties); // the superclass constructor\n    // do nothing if there are no initial properties\n    if (opt_initialProperties === undefined) return;\n    if (opt_initialProperties.operations !== undefined) { // if the operation list is set\n      if (!(opt_initialProperties.operations instanceof Array))\n        throw new TypeError('\"initialProperties.operations\" isn\\'t an Array instance');\n      Object.defineProperty(this, 'operations_', { // generate and store the operations list\n        value: opt_initialProperties.operations.map(operation => new Latex.Operation(operation))\n      });\n    }\n    if (opt_initialProperties.parameters !== undefined) { // if the parameters list is set\n      if (!(opt_initialProperties.parameters instanceof Array))\n        throw new TypeError('\"initialProperties.parameters\" isn\\'t an Array instance');\n      Object.defineProperty(this, 'parameters_', { // generate and store the parameters list\n        value: opt_initialProperties.parameters.map(parameter => new Parameter(parameter))\n      });\n    }\n    if (opt_initialProperties.pattern !== undefined) { // if the LaTeX pattern is set\n      if (typeof opt_initialProperties.pattern !== 'string')\n        throw new TypeError('\"initialProperties.pattern\" isn\\'t a string');\n      // try to parse the pattern\n      let patternComponents = opt_initialProperties.pattern.match(/([ \\t]+|#\\d+|[^ \\t#]+)/g);\n      if (patternComponents !== null) { // if there is a non-trivial pattern\n        Object.defineProperty(this, 'patternComponents_', { // store the pattern components\n          value: patternComponents.map(patternPart => {\n            switch (patternPart[0]) {\n            case ' ': case '\\t': // if a space part\n              return null; // null is a mark for spaces\n            case '#': // if a parameter part\n              let parameterIndex = Number(patternPart.substring(1)) - 1; // the index of a parameter\n              if (!this.parameters_[parameterIndex])\n                throw new TypeError(\n                  '\"initialProperties.pattern\" contains the incorrect parameter number ' +\n                  patternPart.substring(1)\n                );\n              return parameterIndex;\n            default: // raw pattern part\n              return patternPart;\n            }\n          })\n        });\n      }\n    }\n    if (opt_initialProperties.html !== undefined) { // if the LaTeX pattern is set\n      if (typeof opt_initialProperties.html !== 'string')\n        throw new TypeError('\"initialProperties.html\" isn\\'t a string');\n      // store the pattern\n      Object.defineProperty(this, 'html', { value: opt_initialProperties.html, enumerable: true });\n    }\n  };\n\n\n  //noinspection JSUnusedGlobalSymbols\n  /**\n   * Get the LaTeX operations that are performed after this symbol\n   * @return {!Array.<!Latex.Operation>} the operation list\n   * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n   */\n  get operations () { return this.operations_.slice() }\n\n\n  //noinspection JSUnusedGlobalSymbols\n  /**\n   * Get the parameters description list\n   * @return {!Array.<!Latex.Parameter>} the parameter list\n   * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n   */\n  get parameters () { return this.parameters_.slice() }\n\n\n  //noinspection JSUnusedGlobalSymbols\n  /**\n   * Get the parameter description\n   * @param {number} parameterIndex the index of the parameter\n   * @return {?Latex.Parameter} the parameter or null if there is no parameter with such an index\n   * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n   */\n  parameter(parameterIndex) { return this.parameters_[parameterIndex] || null }\n\n\n  //noinspection JSUnusedGlobalSymbols\n  /**\n   * Get the pattern components\n   * @return {!Array.<!Latex.Parameter>} the pattern component list\n   * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n   */\n  get patternComponents () { return this.patternComponents_.slice() }\n\n\n  //noinspection JSUnusedGlobalSymbols\n  /**\n   * Get the pattern\n   * @return {string} the LaTeX input pattern\n   * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n   */\n  get pattern () {\n    return this.patternComponents_.map(patternComponent => {\n      switch (typeof patternComponent) {\n      case 'number': return '#' + (patternComponent + 1);\n      case 'string': return patternComponent;\n      default: return ' ';\n      }\n    }).join('');\n  }\n\n  /**\n   * Compare this symbol with the other one\n   * @param {?Symbol} other the symbol to compare with\n   * @return {boolean} true if the symbols are equal, false otherwise\n   * @override\n   * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n   */\n  equals(other) {\n    if (!(other instanceof Symbol)) return false; // type test\n    if (!super.equals(other)) return false; // superclass test\n    //noinspection JSUnresolvedVariable\n    if (this.operations_.length !== other.operations_.length) return false;\n    // test all the operations\n    //noinspection JSUnresolvedVariable,JSUnresolvedFunction\n    if (!this.operations_.every((operation, iOperation) =>\n        operation.equals(other.operations_[iOperation])))\n      return false;\n    //noinspection JSUnresolvedVariable\n    if (this.parameters_.length !== other.parameters_.length) return false;\n    // test all the parameters\n    //noinspection JSUnresolvedVariable,JSUnresolvedFunction\n    if (!this.parameters_.every((parameter, iParameter) =>\n        parameter.equals(other.parameters_[iParameter])))\n      return false;\n    return this.html === other.html;\n  }\n};\nObject.defineProperties(Symbol.prototype, { // make getters and setters enumerable\n  operations: { enumerable: true },\n  parameters: { enumerable: true },\n  patternComponents: { enumerable: true },\n  pattern: { enumerable: true }\n});\nObject.defineProperties(Symbol.prototype, { // default property values\n  operations_: { value: [], enumerable: false }, // empty operation list\n  parameters_: { value: [], enumerable: false }, // empty parameter list\n  patternComponents_: { value: [], enumerable: false }, // empty pattern\n  html: { value: '', enumerable: true } // empty HTML pattern\n});\n\n\n\n/**\n * LaTeX command properties\n * @interface CommandProperties\n * @extends SymbolProperties\n * @property {(string|undefined)} name - The command name (a sequence of letters and optional star)\n * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n */\n\n\n\n/**\n * LaTeX command encapsulation\n * @class\n * @extends Symbol\n * @property {string} name - The command name (a sequence of letters and optional star)\n * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n */\nconst Command = module.exports['Command'] = class extends Symbol {\n  //noinspection JSUnusedGlobalSymbols\n  /**\n   * Constructor\n   * @param {!CommandProperties=} opt_initialProperties the initial property values\n   */\n  constructor(opt_initialProperties) {\n    super(opt_initialProperties); // the superclass constructor\n    // do nothing if there are no initial properties\n    if (opt_initialProperties === undefined) return;\n    if (opt_initialProperties.name !== undefined) { // if the name is set\n      if (typeof opt_initialProperties.name !== 'string')\n        throw new TypeError('\"initialProperties.name\" isn\\'t a string');\n      // store the name\n      Object.defineProperty(this, 'name', { value: opt_initialProperties.name });\n    }\n  };\n\n\n  //noinspection JSUnusedGlobalSymbols\n  /**\n   * Compare this command with the other one\n   * @param {?Command} other the command to compare with\n   * @return {boolean} true if the commands are equal, false otherwise\n   * @override\n   * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n   */\n  equals(other) {\n    if (!(other instanceof Command)) return false; // type test\n    if (!super.equals(other)) return false; // superclass test\n    return this.name === other.name;\n  }\n};\nObject.defineProperties(Command.prototype, { // default property values\n  name: {value: '', enumerable: true } // empty name\n});\n\n\n\n/**\n * LaTeX command properties\n * @interface EnvironmentProperties\n * @extends ItemProperties\n * @property {(string|undefined)} name - The command name (a sequence of letters and optional star)\n * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n */\n\n\n\n/**\n * LaTeX environment encapsulation\n * @class\n * @extends Item\n * @property {string} name - The environment name (a sequence of letters and optional star)\n * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n */\nconst Environment = module.exports['Environment'] = class extends Item {\n  //noinspection JSUnusedGlobalSymbols\n  /**\n   * Constructor\n   * @param {!EnvironmentProperties=} opt_initialProperties the initial property values\n   */\n  constructor(opt_initialProperties) {\n    super(opt_initialProperties); // the superclass constructor\n    // do nothing if there are no initial properties\n    if (opt_initialProperties === undefined) return;\n    if (opt_initialProperties.name !== undefined) { // if the name is set\n      if (typeof opt_initialProperties.name !== 'string')\n        throw new TypeError('\"initialProperties.name\" isn\\'t a string');\n      // store the name\n      Object.defineProperty(this, 'name', { value: opt_initialProperties.name });\n    }\n  };\n\n\n  //noinspection JSUnusedGlobalSymbols\n  /**\n   * Compare this environment with the other one\n   * @param {?Environment} other the environment to compare with\n   * @return {boolean} true if the environments are equal, false otherwise\n   * @override\n   * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n   */\n  equals(other) {\n    if (!(other instanceof Environment)) return false; // type test\n    if (!super.equals(other)) return false; // superclass test\n    return this.name === other.name;\n  }\n};\nObject.defineProperties(Environment.prototype, { // default property values\n  name: {value: '', enumerable: true } // empty name\n});\n"]}