{"version":3,"sources":["../../sources/lib/Latex.js"],"names":["module","exports","BINARY_OPERATOR","BRACKETS","CELL_SEPARATOR","CHAR","DIGIT","DIRECTIVE","DISPLAY_EQUATION","FILE_PATH","FLOATING_BOX","HORIZONTAL_SKIP","INLINE_EQUATION","LABEL","LENGTH","LETTER","LINE_BREAK","LIST_ITEM","LIST","NUMBER","PARAGRAPH_SEPARATOR","PICTURE","POST_OPERATOR","PRE_OPERATOR","RAW","SPACE","SUBSCRIPT","SUPERSCRIPT","TABLE","TABULAR_PARAMETERS","TAG","UNKNOWN","VERTICAL_SKIP","WORD","WRAPPER","Mode","MATH","TEXT","VERTICAL","State","opt_initialModeStates","Object","defineProperty","value","enumerable","modeStates_","undefined","update","modeStates","TypeError","modeKey","mode","Directive","BEGIN","END","GROUP","Operation","opt_initialProperties","directive","operand","other"],"mappings":"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","file":"Latex.js","sourcesContent":["/**\n * @fileoverview General LaTeX definitions\n * This file is a part of TeXnous project.\n *\n * @copyright TeXnous project team (http://texnous.org) 2016\n * @license LGPL-3.0\n *\n * This library is free software; you can redistribute it and/or modify it under the terms of the\n * GNU Lesser General Public License as published by the Free Software Foundation; either version 3\n * of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without\n * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License along with this library;\n * if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA\n * 02111-1307, USA.\n */\n\n'use strict';\n\n/**@module */\n\n\n/**\n * @namespace Latex\n * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n */\nmodule.exports = {};\n\n\n\n/**\n * LaTeX lexeme\n * @enum {string}\n * @author Kirill Chuvilin <k.chuvilin@texnous.org>\n */\nmodule.exports['Lexeme'] = {\n  BINARY_OPERATOR:     'BINARY_OPERATOR',     // mathematical binary operator\n  BRACKETS:            'BRACKETS',            // logical brackets\n  CELL_SEPARATOR:      'CELL_SEPARATOR',      // table cell separator\n  CHAR:                'CHAR',                // character\n  DIGIT:               'DIGIT',               // digit\n  DIRECTIVE:           'DIRECTIVE',           // LaTeX directive\n  DISPLAY_EQUATION:    'DISPLAY_EQUATION',    // mathematical equation for display mode\n  FILE_PATH:           'FILE_PATH',           // file system path\n  FLOATING_BOX:        'FLOATING_BOX',        // floating box\n  HORIZONTAL_SKIP:     'HORIZONTAL_SKIP',     // any type of horizontal skip but not space\n  INLINE_EQUATION:     'INLINE_EQUATION',     // mathematical equation for inline mode\n  LABEL:               'LABEL',               // label identifier\n  LENGTH:              'LENGTH',              // linear dimension\n  LETTER:              'LETTER',              // word letter\n  LINE_BREAK:          'LINE_BREAK',          // text line break\n  LIST_ITEM:           'LIST_ITEM',           // list item\n  LIST:                'LIST',                // list of items\n  NUMBER:              'NUMBER',              // sequence of digits\n  PARAGRAPH_SEPARATOR: 'PARAGRAPH_SEPARATOR', // paragraph separator\n  PICTURE:             'PICTURE',             // picture\n  POST_OPERATOR:       'POST_OPERATOR',       // mathematical post-operator\n  PRE_OPERATOR:        'PRE_OPERATOR',        // mathematical pre-operator\n  RAW:                 'RAW',                 // unprocessable or raw sources\n  SPACE:               'SPACE',               // any type of space equivalent\n  SUBSCRIPT:           'SUBSCRIPT',           // subscript text\n  SUPERSCRIPT:         'SUPERSCRIPT',         // subscript text\n  TABLE:               'TABLE',               // table\n  TABULAR_PARAMETERS:  'TABULAR_PARAMETERS',  // LaTeX tabular parameters\n  TAG:                 'TAG',                 // formatting tag\n  UNKNOWN:             'UNKNOWN',             // unrecognized element\n  VERTICAL_SKIP:       'VERTICAL_SKIP',       // any type of vertical skip\n  WORD:                'WORD',                // sequence of letters\n  WRAPPER:             'WRAPPER'              // wrapper for something\n};\n\n\n/**\n * LaTeX modes\n * @enum {string}\n * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n */\nconst Mode = module.exports['Mode'] = {\n  LIST:     'LIST',    // list of items\n  MATH:     'MATH',    // mathematical expressionLatex\n  PICTURE:  'PICTURE', // picture\n  TABLE:    'TABLE',   // LaTeX tabular\n  TEXT:     'TEXT',    // general text\n  VERTICAL: 'VERTICAL' // vertical spacing\n};\n\n\n/**\n * LaTeX state encapsulation\n * @class\n * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n */\nconst State = module.exports['State'] = class {\n  //noinspection JSUnusedGlobalSymbols\n  /**\n   * Constructor\n   * @param {!Object.<Mode,boolean>=} opt_initialModeStates the initial mode states\n   * @constructor\n   * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n   */\n  constructor(opt_initialModeStates) {\n    Object.defineProperty(this, 'modeStates_', { value: { }, enumerable: false });\n    //noinspection JSUnresolvedVariable\n    this.modeStates_[Mode.LIST]     = false;\n    //noinspection JSUnresolvedVariable\n    this.modeStates_[Mode.MATH]     = false;\n    //noinspection JSUnresolvedVariable\n    this.modeStates_[Mode.PICTURE]  = false;\n    //noinspection JSUnresolvedVariable\n    this.modeStates_[Mode.TABLE]    = false;\n    //noinspection JSUnresolvedVariable\n    this.modeStates_[Mode.TEXT]     = true;\n    //noinspection JSUnresolvedVariable\n    this.modeStates_[Mode.VERTICAL] = false;\n    // update the mode states\n    if (opt_initialModeStates !== undefined) this.update(opt_initialModeStates);\n  }\n\n\n  //noinspection JSUnusedGlobalSymbols\n  /**\n   * Create a copy of this state.\n   * @return {!State} the created copy\n   * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n   */\n  copy() {\n    //noinspection JSValidateTypes,JSUnresolvedVariable\n    return new State(this.modeStates_);\n  }\n\n\n  /**\n   * Update the state with states for modes\n   * @param {!Object.<Mode,boolean>} modeStates the states for modes\n   * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n   */\n  update(modeStates) {\n    if (!(modeStates instanceof Object))\n      throw new TypeError('\"modeStates\" isn\\'t an Object instance');\n    for (let modeKey in modeStates) { // for all the given modes\n      //noinspection JSUnfilteredForInLoop\n      let mode = Mode[modeKey]; // verify the mode key\n      if (mode === undefined) // if the mode is unknown\n        throw new TypeError('\"modeStates[' + modeKey + ']\" isn\\'t a Latex.Mode option');\n      //noinspection JSUnfilteredForInLoop,JSUnresolvedVariable\n      this.modeStates_[mode] = modeStates[modeKey]; // store the mode state\n    }\n  }\n\n\n  //noinspection JSUnusedGlobalSymbols\n  /**\n   * Test the state with mode states\n   * @param {!Object.<Mode,boolean>} modeStates the states for modes\n   * @return {boolean} true if the state fits the modes, false otherwise\n   * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n   */\n  test(modeStates) {\n    if (!(modeStates instanceof Object))\n      throw new TypeError('\"modeStates\" isn\\'t an Object instance');\n    for (let modeKey in modeStates) { // for all the given modes\n      //noinspection JSUnfilteredForInLoop\n      let mode = Mode[modeKey]; // verify the mode key\n      if (mode === undefined) // if the mode is unknown\n        throw new TypeError('\"modeStates[' + modeKey + ']\" isn\\'t a Latex.Mode option');\n      // exit if the mode has different states\n      //noinspection JSUnfilteredForInLoop,JSUnresolvedVariable\n      if (this.modeStates_[mode] !== modeStates[modeKey]) return false;\n    }\n    return true;\n  }\n};\n\n\n\n/**\n * LaTeX directive\n * @enum {string}\n * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n */\nconst Directive = module.exports['Directive'] = {\n  BEGIN: 'BEGIN', // begin something\n  END:   'END'    // end something\n};\n\n\n\n/**\n * Group operand for directives\n * @const {string}\n * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n */\nvar GROUP = module.exports['GROUP'] = 'GROUP';\n\n\n\n/**\n * LaTeX operation properties\n * @interface OperationProperties\n * @property {Directive} directive - The directive or null if there is no a directive\n * @property {Mode|GROUP} operand - The operand or null if there is no an operand\n * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n */\n\n\n\n/**\n * LaTeX operation encapsulation\n * @class\n * @property {Directive} directive - The directive or null if there is no a directive\n * @property {Mode|GROUP} operand - The operand or null if there is no an operand\n * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n */\nconst Operation = module.exports['Operation'] = class {\n  //noinspection JSUnusedGlobalSymbols\n  /**\n   * Constructor\n   * @param {!OperationProperties=} opt_initialProperties the initial property values\n   * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n   */\n  constructor(opt_initialProperties) {\n    // do nothing if the initial properties aren't defined\n    if (opt_initialProperties === undefined) return;\n    if (!(opt_initialProperties instanceof Object))\n      throw new TypeError('\"initialProperties\" isn\\'t an Object instance');\n    let directive = Directive[opt_initialProperties.directive]; // validate the directive\n    if (!directive)\n      throw new TypeError('\"initialProperties.directive\" isn\\'t an Latex.Directive option');\n    Object.defineProperty(this, 'directive', { value: directive, enumerable: true });\n    switch (opt_initialProperties.operand) {\n    case GROUP: // if operand is a group\n      // store the operand\n      Object.defineProperty(this, 'operand', { value: GROUP, enumerable: true });\n      break;\n    default:\n      let mode = Mode[opt_initialProperties.operand]; // validate the operand as a mode\n      if (!mode) throw new TypeError('\"initialProperties.operand\" isn\\'t an Latex.Mode option');\n      // store the operand\n      Object.defineProperty(this, 'operand', { value: mode, enumerable: true });\n    }\n  };\n\n  //noinspection JSUnusedGlobalSymbols\n  /**\n   * Compare this operation with the other\n   * @param {!Operation} other the operation to compare with\n   * @return {boolean} True if the operations are equal false otherwise\n   * @author Kirill Chuvilin <kirill.chuvilin@gmail.com>\n   */\n  equals(other) {\n    if (!(other instanceof Operation)) return false; // type test\n    return this.directive === other.directive && this.operand === other.operand;\n  };\n};\n"]}