{"version":3,"sources":["../../sources/lib/SyntaxTree.js"],"names":["SyntaxTree","module","exports","rootNode","source","Node","TypeError","parentNode","tree","Object","defineProperty","value","enumerable","opt_initialProperties","undefined","childNodes","Array","forEach","insertChildSubtree","node","childNodes_","indexOf","childIndex","childNodesToCover","parentNodeClass_","length","hasOwnProperty","configurable","nodeChildNodes","splice","subtreeSize","nodeChildNode","nodeSubtreeSize","nodeChildIndex","prototype","apply","concat","skipNodeClass","childNode","toString","slice","defineProperties"],"mappings":"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","file":"SyntaxTree.js","sourcesContent":["/**\n * @fileoverview Syntax tree structure elements\n * This file is a part of TeXnous project.\n *\n * @copyright TeXnous project team (http://texnous.org) 2016\n * @license LGPL-3.0\n *\n * This library is free software; you can redistribute it and/or modify it under the terms of the\n * GNU Lesser General Public License as published by the Free Software Foundation; either version 3\n * of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without\n * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License along with this library;\n * if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA\n * 02111-1307, USA.\n */\n\n'use strict';\n\n/**@module */\n\n\n/**\n * Syntax tree structure\n * @class\n * @property {!Node} rootNode - The root node\n * @property {string} source - The source text\n * @author Kirill Chuvilin <k.chuvilin@texnous.org>\n */\nconst SyntaxTree = module.exports = class {\n  //noinspection JSUnusedGlobalSymbols\n  /**\n   * Constructor\n   * @param {!Node} rootNode the root node (must have no parent and no tree)\n   * @param {string} source the sources text that has this syntax tree\n   * @author Kirill Chuvilin <k.chuvilin@texnous.org>\n   */\n  constructor(rootNode, source) {\n    if (!(rootNode instanceof Node))\n      throw new TypeError('\"rootNode\" isn\\'t a SyntaxTree.Node instance');\n    if (rootNode.parentNode) throw new TypeError('\"rootNode\" has a parent node');\n    if (rootNode.tree) throw new TypeError('\"rootNode\" is a tree root');\n    if (typeof source !== 'string')  throw new TypeError('\"sources\" isn\\'t a string');\n    // store the root node\n    Object.defineProperty(this, 'rootNode', { value: rootNode, enumerable: true });\n    Object.defineProperty(this, 'source', { value: source, enumerable: true }); // store the sources\n    // update the root node tree\n    Object.defineProperty(rootNode, 'tree', { value: this, enumerable: true });\n  }\n};\n\n\n\n/**\n * Syntax tree node properties\n * @interface NodeProperties\n * @property {(?Node|undefined)} parentNode - The parent node or null if there is no parent\n * @property {(!Array.<Node>|undefined)} childNodes - The list of the child nodes\n * @exports\n * @author Kirill Chuvilin <k.chuvilin@texnous.org>\n */\n\n\n\n/**\n * Syntax tree node structure\n * @class\n * @property {?SyntaxTree} tree - The tree or null if this node isn't in any tree\n * @property {?Node} parentNode - The parent node or null if there is no parent\n * @property {!Array.<Node>} childNodes - The child node list\n * @property {number} subtreeSize - The size of the subtree formed by this node\n * @author Kirill Chuvilin <k.chuvilin@texnous.org>\n */\nconst Node = module.exports['Node'] = class {\n  //noinspection JSUnusedGlobalSymbols\n  /**\n   * Constructor\n   * @param {!NodeProperties=} opt_initialProperties the initial property values\n   * @author Kirill Chuvilin <k.chuvilin@texnous.org>\n   */\n  constructor(opt_initialProperties) {\n    if (opt_initialProperties !== undefined) { // if the initial properties are defined\n      if (!(opt_initialProperties instanceof Object))\n        throw new TypeError('initialProperties isn\\'t an Object instance');\n      if (opt_initialProperties.childNodes !== undefined) { // if the child node list is set\n        if (!(opt_initialProperties.childNodes instanceof Array))\n          throw new TypeError('initialProperties.childNodes isn\\'t an Array instance');\n        opt_initialProperties.childNodes.forEach(this.insertChildSubtree, this);\n      }\n      if (opt_initialProperties.parentNode !== undefined) { // if the parent node is set\n        if (opt_initialProperties.parentNode instanceof Node) {\n          //noinspection JSUnresolvedFunction\n          opt_initialProperties.parentNode.insertChildSubtree(this);\n        } else {\n          throw new TypeError('initialProperties.parentNode isn\\'t a SyntaxTree.Node instance');\n        }\n      }\n    }\n  }\n\n\n  //noinspection JSUnusedGlobalSymbols\n  /**\n   * Get the child nodes\n   * @return {!Array.<Node>} the child node list\n   * @author Kirill Chuvilin <k.chuvilin@texnous.org>\n   */\n  get childNodes() {\n    return this.childNodes_.slice()\n  }\n\n\n  //noinspection JSUnusedGlobalSymbols\n  /**\n   * Get the child node\n   * @param {(!Node|number)} node the child node or its child index\n   * @return {?Node} the child node or null of there is no such a child node\n   * @author Kirill Chuvilin <k.chuvilin@texnous.org>\n   */\n  childNode(node) {\n    if (typeof node === 'number') // if the node child index is given\n      return this.childNodes_[node] || null;\n    if (node instanceof Node) // if the child node is given\n      return node.parentNode === this ? node : null;\n    throw new TypeError('\"node\" is neither a number nor a SyntaxTree.Node instance');\n  }\n\n\n  /**\n   * Get the child node index\n   * @param {(!Node|number)} node the child node or its child index\n   * @return {(number|null)} the child node or null of there is no such a child node\n   * @author Kirill Chuvilin <k.chuvilin@texnous.org>\n   */\n  childIndex(node) {\n    if (typeof node === 'number') // if the node child index is given\n      return this.childNodes_[node] ? node : null;\n    if (node instanceof Node) // if the child node is given\n      return node.parentNode === this ? this.childNodes_.indexOf(node) : null;\n    throw new TypeError('\"node\" is neither a number nor a SyntaxTree.Node instance');\n  }\n\n\n  //noinspection JSUnusedGlobalSymbols\n  /**\n   * Insert a node to this child node list\n   * @param {!Node} node the node to insert (must have no parent and no child nodes)\n   * @param {number=undefined} childIndex\n   *        the position of the node for this child node list, the last by default\n   * @param {number=0} childNodesToCover\n   *        the number of this child nodes to become the child nodes of the new node\n   * @return {?Node} the inserted node or null if cannot insert\n   * @author Kirill Chuvilin <k.chuvilin@texnous.org>\n   */\n  insertChildNode(node, childIndex, childNodesToCover) {\n    if (!(node instanceof SyntaxTree.Node))\n      throw new TypeError('\"node\" isn\\'t a SyntaxTree.Node instance');\n    if (node.parentNode) throw new TypeError('\"node\" has a parent');\n    if (node.tree) throw new TypeError('\"node\" is a tree root');\n    //noinspection JSUnresolvedVariable\n    if (!(this instanceof node.parentNodeClass_))\n      throw new TypeError('\"this\" isn\\'t a suitable class instance');\n    //noinspection JSUnresolvedVariable\n    if (node.childNodes_.length) throw new TypeError('\"node\" has child nodes');\n    if (!this.hasOwnProperty('childNodes_')) // if there was no child nodes\n    // init the property\n      Object.defineProperty(this, 'childNodes_', { value: [], configurable: true });\n    // use the last position by default\n    if (childIndex === undefined) childIndex = this.childNodes_.length;\n    // do not cover any child nodes by default\n    if (childNodesToCover === undefined) childNodesToCover = 0;\n    // replace the child nodes by the new node\n    let nodeChildNodes = this.childNodes_.splice(childIndex, childNodesToCover, node);\n    // update the size of the subtree formed by this node\n    Object.defineProperty(this, 'subtreeSize', {\n      value: this.subtreeSize + 1,\n      enumerable: true,\n      configurable: true\n    });\n    // for all the parent nodes\n    for (let parentNode = this.parentNode; parentNode; parentNode = parentNode.parentNode) {\n      // update the size of the subtree formed by the parent node\n      Object.defineProperty(parentNode, 'subtreeSize', { value: parentNode.subtreeSize + 1 });\n    }\n    // update the parent node of the new node\n    Object.defineProperty(node, 'parentNode', {\n      value: this,\n      enumerable: true,\n      configurable: true\n    });\n    if (nodeChildNodes.length) { // if there are child nodes for the new node\n      // store the child nodes\n      Object.defineProperty(node, 'childNodes_', { value: nodeChildNodes, configurable: true });\n      let subtreeSize = 1; // initiate the size of the subtree formed by the new node\n      // for all the child nodes of the new node\n      nodeChildNodes.forEach(nodeChildNode => { subtreeSize += nodeChildNode.subtreeSize });\n      // store the subtree size\n      Object.defineProperty(node, 'subtreeSize', {\n        value: subtreeSize,\n        enumerable: true,\n        configurable: true\n      });\n    }\n    return node;\n  }\n\n\n  /**\n   * Insert a subtree to this child node list.\n   * @param {!Node} node the subtree to insert root node (must have no parent)\n   * @param {number=} childIndex\n   *        the position of the subtree root for this child node list, the last by default\n   * @author Kirill Chuvilin <k.chuvilin@texnous.org>\n   */\n  insertChildSubtree(node, childIndex) {\n    if (!(node instanceof SyntaxTree.Node))\n      throw new TypeError('\"node\" isn\\'t a SyntaxTree.Node instance');\n    if (node.parentNode) throw new TypeError('\"node\" has a parent');\n    if (node.tree) throw new TypeError('\"node\" is a tree root');\n    //noinspection JSUnresolvedVariable\n    if (!(this instanceof node.parentNodeClass_))\n      throw new TypeError('\"this\" isn\\'t a suitable class instance');\n    // init child nodes property if not exists\n    if (!this.hasOwnProperty('childNodes_')) // if there was no child nodes\n    // init the property\n      Object.defineProperty(this, 'childNodes_', { value: [], configurable: true });\n    // use the last position by default\n    if (childIndex === undefined) childIndex = this.childNodes_.length;\n    this.childNodes_.splice(childIndex, 0, node); // insert the new node to the child list\n    let nodeSubtreeSize = node.subtreeSize; // the size of the subtree formed by the node\n    // update the size of the subtree formed by this node\n    Object.defineProperty(this, 'subtreeSize', {\n      value: this.subtreeSize + nodeSubtreeSize, enumerable: true, configurable: true\n    });\n    // for all the parent nodes\n    for (let parentNode = this.parentNode; parentNode; parentNode = parentNode.parentNode) {\n      // update the size of the subtree formed by the parent node\n      Object.defineProperty(parentNode, 'subtreeSize', {\n        value: parentNode.subtreeSize + nodeSubtreeSize\n      });\n    }\n    // update the parent node of the new node\n    Object.defineProperty(node, 'parentNode', {\n      value: this,\n      enumerable: true,\n      configurable: true\n    });\n  }\n\n  \n  //noinspection JSUnusedGlobalSymbols\n  /**\n   * Remove a child node of this node. All its child nodes become the child nodes of this node\n   * @param {(!Node|number)} node the subtree root or its child index\n   * @return {?Node} the removed node or null of there is no such a child node\n   * @author Kirill Chuvilin <k.chuvilin@texnous.org>\n   */\n  removeChildNode(node) {\n    let nodeChildIndex = this.childIndex(node); // the child index of the node\n    if (nodeChildIndex === null) return null; // return if there is no such a child\n    node = this.childNodes_[nodeChildIndex]; // the child node to remove\n    // replace the node with its child nodes at this child node list\n    //noinspection JSUnresolvedVariable\n    Array.prototype.splice.apply(this.childNodes_, [nodeChildIndex, 1].concat(node.childNodes_));\n    if (this.childNodes_.length) { // if there are child nodes\n      // update this node subtree size\n      Object.defineProperty(this, 'subtreeSize', { value: this.subtreeSize - 1 });\n    } else { // if there are no child nodes\n      delete this.childNodes_; // this node has no child nodes anymore\n      delete this.subtreeSize; // this node has node subtree anymore\n    }\n    // for all the parent nodes\n    for (let parentNode = this.parentNode; parentNode; parentNode = parentNode.parentNode) {\n      // update the size of the subtree formed by the parent node\n      Object.defineProperty(parentNode, 'subtreeSize', { value: parentNode.subtreeSize - 1 });\n    }\n    delete node.parentNode; // the node has no parent node anymore\n    //noinspection JSUnresolvedVariable\n    delete node.childNodes_; // the node has no child nodes anymore\n    delete node.subtreeSize; // the node has no subtree anymore\n    return node;\n  }\n\n\n  //noinspection JSUnusedGlobalSymbols\n  /**\n   * Remove a subtree formed by a child node of this node\n   * @param {(!Node|number)} node the subtree root or its child index\n   * @return {?Node} the removed subtree root node or null of there is no such a child node\n   * @author Kirill Chuvilin <k.chuvilin@texnous.org>\n   */\n  removeChildSubtree(node) {\n    let nodeChildIndex = this.childIndex(node); // the child index of the node\n    if (nodeChildIndex === null) return null; // return if there is no such a child\n    node = this.childNodes_.splice(nodeChildIndex, 1)[0]; // remove the node from the child list\n    let nodeSubtreeSize = node.subtreeSize; // the size of the subtree formed by the node\n    if (this.childNodes_.length) { // if there are child nodes\n      // update this node subtree size\n      Object.defineProperty(this, 'subtreeSize', { value: this.subtreeSize - nodeSubtreeSize });\n    } else { // if there are no child nodes\n      delete this.childNodes_; // this node has no child nodes anymore\n      delete this.subtreeSize; // this node has node subtree anymore\n    }\n    // for all the parent nodes\n    for (let parentNode = this.parentNode; parentNode; parentNode = parentNode.parentNode) {\n      // update the size of the subtree formed by the parent node\n      Object.defineProperty(parentNode, 'subtreeSize', {\n        value: parentNode.subtreeSize - nodeSubtreeSize\n      });\n    }\n    delete node.parentNode; // the node has no parent node anymore\n    return node;\n  }\n\n\n  /**\n   * Get the string representation of this node\n   * @param {boolean=false} skipNodeClass\n   *        true to not include the node class name into the output, false otherwise\n   * @return {string} the sources string\n   * @override\n   * @author Kirill Chuvilin <k.chuvilin@texnous.org>\n   */\n  toString(skipNodeClass) {\n    let source = ''; // the sources\n    // for all the child nodes\n    this.childNodes_.forEach(childNode => { source += childNode.toString(true) });\n    return skipNodeClass ? source : 'SourceTree.Node{' + source + '}';\n  }\n};\nObject.defineProperties(Node.prototype, { // make getters and setters enumerable\n  childNodes: { enumerable: true }\n});\nObject.defineProperties(Node.prototype, { // default property values\n  tree: { value: null, enumerable: true }, // no tree\n  parentNode: { value: null, enumerable: true }, // no parent node\n  subtreeSize: { value: 1, enumerable: true }, // only one node in the subtree\n  childNodes_: { value: [], enumerable: false }, // no child nodes\n  parentNodeClass_: { value: Node, enumerable: false } // parent node must be a Node instance\n});\n"]}